<!DOCTYPE html>
<html>

<head>
  <title>SECAM</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="secam" id="secam">
    <div class="logo">
      <img src="/logo.png">
    </div>
    <div class="streaming">
      <img id="streamedImage" src="<%= IMAGE_STREAM_URL %>" alt="SECAM" crossorigin="anonymous"
        onerror="handleImageError()">
    </div>
    <div class="button">
      <div class="set">
        <button id="startRecording" style="margin: auto;">녹화시작</button>
        <button id="stopRecording"style="margin:auto;">녹화종료</button>
        <button id="reset" onclick="reset()" style="margin: auto;">초기화</button>
      </div>
      <div class="servoBtn">
        <button class="button-up" onclick="camara_u()" style="margin-top: 10px;">▲</button>
        <div class="left-right-buttons">
        <button class="button-left" onclick="camara_l()" style="margin-right: 20px; margin-right: 20px;">◀</button>
        <button class="button-right" onclick="camara_r()" style="margin-left: 20px;">▶</button>
      </div>
        <button class="button-down" onclick="camara_d()">▼</button>
      </div>
    </div>
      <div class="clock">
        <div id="date" class="date"></div>
        <div class="time" id="time" class="time"></div>
      </div>
      <div class="eventGraph">
        <canvas id="pushCntGraph"></canvas>
      </div>
    <div class="viewPageClientLog" id="log">
      <form id="viewLogsForm" class="fixed-form">
        <label for="selectedDate" >날짜 선택:</label>
        <input type="date" id="selectedDate" name="selectedDate" required style="font-size: 15px;">
        <button type="submit" >조회</button><br>
        <div class="logsResult"  id="logsResult"></div>
      </form>
    </div>
    <div class="footer">@All Copyrights - Team SECAM<br>2023 Hanseo Univ. Aerospace Software Engineering.<br>Aerospace Software Capstone Project<br>함기성 이대호 조성진 박성훈</div>
  </div>
<script src="/socket.io/socket.io.js"></script>
<script>
  let mediaRecorder;
  let recordedChunks = [];
  let recordingStarted = false;
  let firstTime = true;
  var socket = io();

  const streamedImage = document.getElementById('streamedImage');
  streamedImage.addEventListener('load', async ()  => {
    new Notification("침입 감지", { body: '침입이 감지되었습니다!' });
    if(firstTime){
    try {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '침입 감지', level: '정상' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
        firstTime=false;
      } else {
        console.log("침입 감지-정상 로그 저장 실패");
      }
    } catch (err) {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '침입 감지', level: '오류' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
      } else {
        console.log("침입 감지-오류 로그 저장 실패");
      }
    }
  }
});

  const refreshImage = () => {
    const streamedImage = document.getElementById('streamedImage');
    const newSrc = `<%= IMAGE_STREAM_URL %>`;
    streamedImage.src = newSrc;
  };

  const handleImageError = () => {
    setTimeout(refreshImage, 2000);
  };

  const startRecording = async () => {
    if (!recordingStarted) {
      recordingStarted = true;
      recordedChunks = [];
      const streamedImage = document.getElementById('streamedImage');
      const canvas = document.createElement('canvas');
      const canvasContext = canvas.getContext('2d');
      const videoWidth = streamedImage.width;
      const videoHeight = streamedImage.height;
      canvas.width = videoWidth;
      canvas.height = videoHeight;

      mediaRecorder = new MediaRecorder(canvas.captureStream());
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          recordedChunks.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const videoBlob = new Blob(recordedChunks, { type: 'video/mp4' });
        const videoURL = URL.createObjectURL(videoBlob);
        const now = new Date();
        const filename = `recorded_video_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}.mp4`;
        const downloadLink = document.createElement('a');
        downloadLink.href = videoURL;
        downloadLink.download = filename;
        downloadLink.click();
        recordingStarted = false;
      };

      const recordStreamedImage = () => {
        canvasContext.drawImage(streamedImage, 0, 0, videoWidth, videoHeight);
        if (recordingStarted) {
          requestAnimationFrame(recordStreamedImage);
        }
      };

      mediaRecorder.start();
      recordStreamedImage();
    }

    try {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '녹화시작', level: '정상' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
      } else {
        console.log("녹화시작-정상 로그 저장 실패");
      }
    } catch (err) {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '녹화시작', level: '오류' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
      } else {
        console.log("녹화시작-오류 로그 저장 실패");
      }
    }
  };

  const stopRecording = async () => {
    try {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '녹화중지', level: '정상' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
      } else {
        console.log("녹화중지-정상 로그 저장 실패");
      }
    } catch (err) {
      const response = await fetch('/addLog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: '녹화중지', level: '오류' })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(result.message);
      } else {
        console.log("녹화중지-오류 로그 저장 실패");
      }
    }
    if (recordingStarted) {
      mediaRecorder.stop();
    }
  };

  document.getElementById('startRecording').addEventListener('click', startRecording);
  document.getElementById('stopRecording').addEventListener('click', stopRecording);

  function camara_u() {
    socket.emit('camara_u');
  }
  function camara_d() {
    socket.emit('camara_d');
  }
  function camara_l() {
    socket.emit('camara_l');
  }
  function camara_r() {
    socket.emit('camara_r');
  }
  function reset() {
    socket.emit('reset');
  }

  const viewLogsForm = document.getElementById('viewLogsForm');
  const logsResult = document.getElementById('logsResult');

  viewLogsForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    const formData = new FormData(viewLogsForm);
    const selectedDate = formData.get('selectedDate');

    try {
      const response = await fetch(`/getLogs?selectedDate=${selectedDate}`);
      const logs = await response.json();
      // 받아온 DB 값들을 화면에 표시
      let logsHtml = '<div class="log-container"><ul>';
      if (logs.length === 0) { // 데이터가 없을 경우
        logsHtml += `<li>${selectedDate}일에 발생한 로그 정보가 없습니다.</li>`;
      } else {
        logs.forEach((log) => {
          logsHtml += `<li>${log.time} - ${log.status} - ${log.level}</li>`;
        });
      }
      logsHtml += '</ul></div>';
      logsResult.innerHTML = logsHtml;
    } catch (error) {
      console.error(error);
      logsResult.innerHTML = 'Error retrieving logs';
    }
  });

  async function fetchPushCntData(startDate, endDate) {
    try {
      const response = await fetch(`/getPushCntData?startDate=${startDate}&endDate=${endDate}`);
      const pushCntValues = await response.json();

      const dateLabels = [];

      const currentDate = new Date(startDate);
      const endDateObj = new Date(endDate);

      while (currentDate <= endDateObj) {
        dateLabels.push(currentDate.getDate());
        currentDate.setDate(currentDate.getDate() + 1);
      }
      

      const ctx = document.getElementById('pushCntGraph').getContext('2d');
      new Chart(ctx, {
        type: 'line', // 선형 그래프로 변경
        data: {
          labels: dateLabels,
          datasets: [{
            label: '침입 이벤트 발생건수',
            data: pushCntValues,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 3,
            fill: true // 선형 그래프에서 내부를 채우지 않음
          }]
        },
        options: {
          maintainAspectRatio :false,
          reponsive: false,
          scales: {
            y: {
              beginAtZero: true,
              max: Math.max(...pushCntValues) + 1
            },
            x: {
              display: true,
              title: {
                display: true,
                text: '일'
              }
            }
          }
        }
      });

    } catch (error) {
      console.error(error);
    }
  }

  // 대한민국 서울 기준으로 현재 날짜 정보 가져오기
  document.addEventListener('DOMContentLoaded', async () => {
    const currentTime = new Date();
    const options = { timeZone: 'Asia/Seoul' };
    const currentYear = currentTime.getFullYear();
    const currentMonth = currentTime.getMonth();
    const startDate = new Date(currentYear, currentMonth, 1).toLocaleString('en-US', options).substr(0, 10);
    const endDate = new Date(currentYear, currentMonth + 1, 0).toLocaleString('en-US', options).substr(0, 10);

    await fetchPushCntData(startDate, endDate);
  });
  // 시계 함수
  function setClock() {
    const week = new Array('SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT');
    var dateInfo = new Date()
    const year = dateInfo.getFullYear();
    const month = dateInfo.getMonth() + 1 < 10 ? '0' + (dateInfo.getMonth() + 1) : dateInfo.getMonth() + 1;
    const date = dateInfo.getDate() < 10 ? '0' + dateInfo.getDate() : dateInfo.getDate();
    const dayName = week[dateInfo.getDay()];
    var hour = dateInfo.getHours() % 12 ? dateInfo.getHours() % 12 : 12;
    if (hour < 10) hour = '0' + hour;
    const min = dateInfo.getMinutes() < 10 ? '0' + dateInfo.getMinutes() : dateInfo.getMinutes();
    const sec = dateInfo.getSeconds();
    const ampm = dateInfo.getHours() >= 12 ? 'PM' : 'AM';
    document.getElementById("time").innerHTML = hour + ":" + min + "<span style='font-size:50px;'> " + ampm + "</span>";
      document.getElementById("date").innerHTML = year + "." + month + "." + date + "." + dayName;
  }
  window.onload = function () {
    setClock();
    setInterval(setClock, 1000);
  }
</script>
</body>
</html>
